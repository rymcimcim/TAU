package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.City;

public class CityManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PERSON = "CREATE TABLE City(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(50), postalCode integer)";

	private PreparedStatement addCityStmt;
	private PreparedStatement deleteCityStmt;
	private PreparedStatement deleteAllCityStmt;
	private PreparedStatement getAllCityStmt;
	private PreparedStatement getCityByIdStmt;

	private Statement statement;

	public CityManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("City".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PERSON);

			addCityStmt = connection
					.prepareStatement("INSERT INTO City (name, postalCode) VALUES (?, ?)");
			deleteCityStmt = connection
					.prepareStatement("DELETE FROM City where id = ?");
			deleteAllCityStmt = connection
					.prepareStatement("DELETE FROM City");
			getAllCityStmt = connection
					.prepareStatement("SELECT id, name, postalCode FROM City");
			getCityByIdStmt = connection
					.prepareStatement("SELECT id, name, postalCode FROM City where id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearCities() {
		try {
			deleteAllCityStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addCity(City city) {
		int count = 0;
		try {
			addCityStmt.setString(1, city.getName());
			addCityStmt.setInt(2, city.getPostalCode());

			count = addCityStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<City> getAllCities() {
		List<City> cities = new ArrayList<City>();

		try {
			ResultSet rs = getAllCityStmt.executeQuery();

			while (rs.next()) {
				City c = new City();
				c.setId(rs.getInt("id"));
				c.setName(rs.getString("name"));
				c.setPostalCode(rs.getInt("postalCode"));
				cities.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return cities;
	}

	public City getCity(Long id) {
		City c = new City();
		try {
			getCityByIdStmt.setLong(1, id);
			ResultSet rs = getCityByIdStmt.executeQuery();

			while (rs.next()) {
				c.setId(rs.getInt("id"));
				c.setName(rs.getString("name"));
				c.setPostalCode(rs.getInt("yob"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return c;
	}
	
	public int deleteCity(Long id){
		try {
			deleteCityStmt.setLong(1, id);
			return deleteCityStmt.executeUpdate();
		} catch (SQLException e) {
			return 0;
		}
	}

}
